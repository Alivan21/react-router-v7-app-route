import { format } from "date-fns";
import { enUS } from "date-fns/locale";
import { CalendarIcon } from "lucide-react";
import * as React from "react";
import { useRef, useMemo, useCallback } from "react";
import { Button } from "@/components/ui/button";
import { type CalendarProps, Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import {
  TimePicker,
  TimePickerInput,
  type TimePickerType,
  type Granularity,
} from "@/components/ui/time-picker";
import { cn } from "@/libs/clsx";
import { MonthYearGrid } from "./month-year-grid";

type DateTimePickerProps = {
  value?: Date;
  onChange?: (date: Date | undefined) => void;
  onMonthChange?: (date: Date | undefined) => void;
  disabled?: boolean;
  /** showing `AM/PM` or not. */
  hourCycle?: 12 | 24;
  placeholder?: string;
  /**
   * The year range will be: `This year + yearRange` and `this year - yearRange`.
   * Default is 50.
   * For example:
   * This year is 2024, The year dropdown will be 1974 to 2024 which is generated by `2024 - 50 = 1974` and `2024 + 50 = 2074`.
   * */
  yearRange?: number;
  /**
   * The format is derived from the `date-fns` documentation.
   * @reference https://date-fns.org/v3.6.0/docs/format
   **/
  displayFormat?: { hour24?: string; hour12?: string };
  /**
   * The granularity prop allows you to control the smallest unit that is displayed by DateTimePicker.
   * By default, the value is `second` which shows all time inputs.
   **/
  granularity?: Granularity;
  className?: string;
  /**
   * Show the default month and time when popup the calendar. Default is the current Date().
   **/
  defaultPopupValue?: Date;
} & Pick<CalendarProps, "locale" | "weekStartsOn" | "showWeekNumber" | "showOutsideDays">;

type DateTimePickerRef = {
  value?: Date;
} & Omit<HTMLButtonElement, "value">;

const DateTimePicker = React.forwardRef<Partial<DateTimePickerRef>, DateTimePickerProps>(
  (
    {
      locale = enUS,
      defaultPopupValue = new Date(new Date().setHours(0, 0, 0, 0)),
      value,
      onChange,
      onMonthChange,
      hourCycle = 24,
      yearRange = 60,
      disabled = false,
      displayFormat,
      granularity = "second",
      placeholder = "Pick a date",
      className,
      ...props
    },
    ref
  ) => {
    const [isOpen, setIsOpen] = React.useState(false);
    const [month, setMonth] = React.useState<Date>(() => value ?? defaultPopupValue);
    const buttonRef = useRef<HTMLButtonElement>(null);
    const [displayDate, setDisplayDate] = React.useState<Date | undefined>(value ?? undefined);

    const initHourFormat = useMemo(
      () => ({
        hour24:
          displayFormat?.hour24 ??
          (granularity === "year"
            ? "yyyy"
            : granularity === "month"
              ? "MMMM yyyy"
              : granularity === "day"
                ? "PPP"
                : `PPP HH:mm${!granularity || granularity === "second" ? ":ss" : ""}`),
        hour12:
          displayFormat?.hour12 ??
          (granularity === "year"
            ? "yyyy"
            : granularity === "month"
              ? "MMMM yyyy"
              : granularity === "day"
                ? "PP"
                : `PP hh:mm${!granularity || granularity === "second" ? ":ss" : ""} b`),
      }),
      [displayFormat, granularity]
    );

    const loc = useMemo(() => {
      if (locale.options && locale.localize && locale.formatLong) {
        return {
          ...enUS,
          options: locale.options,
          localize: locale.localize,
          formatLong: locale.formatLong,
        };
      }
      return enUS;
    }, [locale]);

    /**
     * carry over the current time when a user clicks a new day
     * instead of resetting to 00:00
     */
    const handleMonthChange = useCallback(
      (newDay: Date | undefined) => {
        if (!newDay) return;

        setMonth(newDay);

        if (onMonthChange) {
          onMonthChange(newDay);
        }
      },
      [onMonthChange]
    );

    const onSelect = useCallback(
      (newDay?: Date) => {
        if (!newDay) return;
        onChange?.(newDay);
        setMonth(newDay);
        setDisplayDate(newDay);
      },
      [onChange]
    );

    React.useImperativeHandle(
      ref,
      () => ({
        ...buttonRef.current,
        value: displayDate,
      }),
      [displayDate]
    );

    const handleTimeChange = useCallback(
      (
        value:
          | Date
          | ((prevState: Date) => Date)
          | ((prevState: Date | undefined) => Date | undefined)
          | undefined
      ) => {
        if (!value) return;

        let dateValue: Date;
        if (typeof value === "function") {
          const currentDate = month || new Date();
          dateValue = value(currentDate) as Date;
        } else {
          dateValue = value;
        }

        requestAnimationFrame(() => {
          onChange?.(dateValue);
          setDisplayDate(dateValue);
          setMonth(dateValue);
        });
      },
      [onChange, month]
    );

    const getIntlLocale = useCallback(() => {
      if (typeof locale === "object" && locale !== null && "code" in locale) {
        return (locale as { code: string }).code;
      }

      // For enUS and other date-fns locale objects, try to get locale name from the object structure
      if (
        typeof locale === "object" &&
        locale !== null &&
        "formatLong" in locale &&
        "options" in locale
      ) {
        // Some date-fns locales have language code as part of their internal name
        const localeName = Object.prototype.toString.call(locale);
        // Extract potential locale code from "[object XXLocale]" format
        const match = /\[object ([a-zA-Z]{2,})Locale\]/.exec(localeName);
        if (match && match[1]) {
          return match[1].toLowerCase();
        }
      }

      return "en-US";
    }, [locale]);

    const formattedDate = useMemo(() => {
      if (!displayDate) return null;
      return format(displayDate, hourCycle === 24 ? initHourFormat.hour24 : initHourFormat.hour12, {
        locale: loc,
      });
    }, [displayDate, hourCycle, initHourFormat, loc]);

    const handleClear = useCallback(() => {
      onChange?.(undefined);
      setDisplayDate(undefined);
      setMonth(new Date());
    }, [onChange]);

    const handleToday = useCallback(() => {
      const now = new Date();
      onChange?.(now);
      setDisplayDate(now);
      setMonth(now);
    }, [onChange]);

    return (
      <Popover onOpenChange={setIsOpen} open={isOpen}>
        <PopoverTrigger asChild disabled={disabled}>
          <Button
            className={cn(
              "hover:bg-accent/30 hover:border-accent w-full justify-start text-left font-normal transition-colors",
              !displayDate && "text-muted-foreground",
              className
            )}
            ref={buttonRef}
            type="button"
            variant="outline"
          >
            <CalendarIcon className="mr-2 h-4 w-4" />
            {formattedDate ? formattedDate : <span>{placeholder}</span>}
          </Button>
        </PopoverTrigger>
        <PopoverContent align="start" className="w-auto p-0">
          {isOpen && (
            <>
              {granularity !== "year" && granularity !== "month" && (
                <Calendar
                  futureYears={2}
                  locale={locale}
                  mode="single"
                  month={month}
                  onMonthChange={handleMonthChange}
                  onSelect={(newDate) => {
                    if (newDate) {
                      newDate.setHours(
                        month?.getHours() ?? 0,
                        month?.getMinutes() ?? 0,
                        month?.getSeconds() ?? 0
                      );
                      onSelect(newDate);
                    }
                  }}
                  pastYears={yearRange}
                  selected={displayDate}
                  {...props}
                />
              )}
              {granularity === "month" && (
                <MonthYearGrid
                  locale={getIntlLocale()}
                  onChange={(newDate) => {
                    handleMonthChange(newDate);
                    onSelect(newDate);
                  }}
                  type="month"
                  value={displayDate}
                />
              )}
              {granularity === "year" && (
                <MonthYearGrid
                  locale={getIntlLocale()}
                  onChange={(newDate) => {
                    handleMonthChange(newDate);
                    onSelect(newDate);
                  }}
                  type="year"
                  value={displayDate}
                />
              )}
              {granularity !== "year" && granularity !== "month" && granularity !== "day" && (
                <div className="border-border border-t pt-2">
                  <TimePicker
                    date={month}
                    granularity={granularity}
                    hourCycle={hourCycle}
                    onChange={handleTimeChange}
                  />
                </div>
              )}
              <div
                className={cn(
                  "flex justify-between px-6",
                  granularity !== "day" && granularity !== "month" && granularity !== "year"
                    ? "py-2"
                    : "pb-2"
                )}
              >
                <Button
                  className="px-2 text-sm font-normal"
                  onClick={handleClear}
                  size="sm"
                  type="button"
                  variant="outline"
                >
                  Clear
                </Button>
                <Button
                  className="px-2 text-sm font-normal"
                  onClick={handleToday}
                  size="sm"
                  type="button"
                  variant="default"
                >
                  Today
                </Button>
              </div>
            </>
          )}
        </PopoverContent>
      </Popover>
    );
  }
);

DateTimePicker.displayName = "DateTimePicker";

export { DateTimePicker, TimePickerInput, TimePicker };
export type { DateTimePickerProps, DateTimePickerRef, TimePickerType, Granularity };
